@using OnlineCoursesPlatform.CLIENT.Pages
@using OnlineCoursesPlatform.CLIENT.Services
@inject ILocalStorageService LocalStorageService
@inject NavigationManager Navigation

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        @if (IsCheckingAuthentication)
        {
            <!-- Pantalla de carga mientras se verifica la autenticación -->
            <p>Verificando autenticación...</p>
        }
        else
        {
            @if (IsAuthenticated || IsPublicRoute(routeData.PageType))
            {
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            }
            else
            {
                // Redirigir al login si no está autenticado y no es una ruta pública
                Navigation.NavigateTo("/login", true);
            }
        }
    </Found>
    <NotFound>
        <PageTitle>Página no encontrada</PageTitle>
        <LayoutView Layout="@typeof(SimpleLayout)">
            <p role="alert">Lo siento, no hay nada en esta dirección.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private bool IsAuthenticated = false;
    private bool IsCheckingAuthentication = true;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationAsync();
    }

    private async Task CheckAuthenticationAsync()
    {
        var token = await LocalStorageService.GetTokenAsync("authToken");

        IsAuthenticated = !string.IsNullOrEmpty(token);
        IsCheckingAuthentication = false;

        // Depuración para verificar el estado de la autenticación
        Console.WriteLine($"Autenticado: {IsAuthenticated}, Token: {token}");
    }

    private bool IsPublicRoute(Type pageType)
    {
        var publicRoutes = new[] { typeof(LoginPage), typeof(RegisterPage), typeof(ForgotPasswordPage) };
        return publicRoutes.Contains(pageType);
    }
}